✔ OrdersModule @done(20-06-15 14:17)
✔ ClientsModule @done(20-06-15 14:17)
✔ LibraryModule @done(20-06-15 14:17)
✔ PageNotFoundModule @done(20-06-15 14:17)
✔ CoreModule @done(20-06-15 14:17)
✔ IconsModule @done(20-06-15 14:17)
✔ TextModule @done(20-06-15 14:17)
✔ UiModule @done(20-06-15 14:17)
✔ TemplatesModule @done(20-06-15 14:17)

✔ enum client (ACTIVE, INACTIVE) @done(20-06-18 16:02)
✔ interface ClientI (voir db) @done(20-06-18 16:08)
✔ model Client @done(20-06-18 16:08)
✔ service ClientService @done(20-06-18 16:13)
✔ PageListClientComponent @done(20-06-19 14:35)
  ✔ template-one-col avec bgColor2 @done(20-06-19 14:35)
  ✔ table-light ou table-dark (name, tva, ca(total ca ht), tva, ca ttc, state) @done(20-06-19 14:35)
  ✔ item.ca (ca total ht) afficher une colone CA TTC à l'aide d'un nouveau Pipe qui return ca + tva @done(20-06-19 14:35)
  ✔ utiliser la meme directive pour le bg des td states @done(20-06-19 14:35)
  ✔ state-active, state-inactive (2 noms de class que vous devez ajouter dans table-light.scss et table-dark.scss) @done(20-06-19 14:35)


☐ tp edit order

✔ créer une route qui prend un paramètre id après edit/? @done(20-06-19 14:49)
✔  créer la page pour la page edit-order @done(20-06-19 14:50)
✔ sur list-order-component.html ajouter un click sur le tr qui appel edit(item) @done(20-06-19 14:51)
✔ sur list-order-component.ts la fonction edit redirige vers la route orders/edit/1 @done(20-06-19 15:01)
☐ sur edit-order-component.ts injecter ActivatedRoute (observable data)
☐ souscrire à l'objet data pour récupérer l'id dans l'url
☐ this.os.getItemById(id) (appel http) dans le service
☐ sur edit-order-component.html utilisez une instance de form-order et binder l'input initItem avec l'item que vous venez de récupérer dans votre subscribe
